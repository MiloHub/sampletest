
package com.paypal.interview.fakepay;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Solution {
	
	
	public static void main(String[] args) {
		
		subNumber("200", "109");
		//System.out.println(decodeWays("101" , 0));
		
		//reverseInt(-123);
		
		
		int[][] r = new int[3][];
		
		for(int i =0,b=0;i<1;i++){
			for(int j=0;j<2;j++){
				r[b]= new int[]{i,j};
			}
		}
		
		System.out.println(100-200);
		
		int[] m = {1,2,5, 7};
		
		
		
		int x = m.length;
		
		
		int[] n = {3,9,12};
		int[] p = new int[m.length+n.length];
		Arrays.fill(p, 0);
		int y = n.length;
		
		for(int i=0;i<m.length;i++){
			p[i] = m[i];
		}
		//System.out.println(m);
		
		merge(p,x,n,y);
		
		
	}

	
	
	 public static void reverseInt(int x){
		 
		 int z =0;
		 while(x!=0){
			 
			 z = z *10 + x%10 ;
			 x = x/10;
			 System.out.println(z + " : " +x);
		 }
		 
		 System.out.println(z);
	 }
	
	 
	 public static void subNumber(String a, String b){
			
			int i = a.length()-1;
			int j = b.length()-1;
			 
	        Map<Integer,List<Integer>> m = new TreeMap();
	        
	        
	        
	        
	        
			
			StringBuilder sb = new StringBuilder();
			
			int carry =0;
			
			int borrow = 0;
			
			int diff = 0;
			
			while(i>=0 || j>=0){
				
				
				   int sum =  ((a.charAt(i)-'0') - (b.charAt(i)-'0')) -borrow;
				
				   if(sum <0){
					   borrow =1;
					     diff+= 10;
					   
				   }else borrow = 0;
				   
				   sb.append(diff);
				  // carry = sum/10;
				   i--;
				   j--;
				
			}
			
			if(carry>0){
				sb.append(carry);
			}
			
			   System.out.println(sb.reverse().toString());
		}
	public static void addNumber(String a, String b){
		
		int i = a.length()-1;
		int j = b.length()-1;
		
		StringBuilder sb = new StringBuilder();
		
		int carry =0;
		
		while(i>=0 || j>=0){
			
			
			   int sum = carry + (a.charAt(i)-'0') + (b.charAt(i)-'0');
			
			   sb.append(sum%10);
			   carry = sum/10;
			   i--;
			   j--;
			
		}
		
		if(carry>0){
			sb.append(carry);
		}
		
		   System.out.println(sb.reverse().toString());
	}
	
	
	public static void merge(int[] nums1, int m, int[] nums2, int n) {
        
        int r = m-1;
      int l = n-1;
      int k = m+n-1;
      
      while(r>=0&& l>= 0){
          
          if(nums2[l] > nums1[r]){
  
              nums1[k] = nums2[l];
              k--;
              l--;
          }else {
                nums1[k] = nums1[r];
              k--;
              r--;
          }
      }
      
      while(l>=0){
          nums1[k] = nums2[l];
          k--;
          l--;
      }
      
      
      
  }
	
	   public static int decodeWays(String i , int index){
		   
		   
		   
		   int ans = 0;
		   
		   if(i.length()==index) return 1;
		   
		   if(i.charAt(index) !='0')
		   ans+= decodeWays(i , index+1);
		   int num =0;
		   
		   	if(index<=i.length()-2){
		   		num =( i.charAt(index)-'0') *10 +  (i.charAt(index+1)-'0');
		   		
		   		
		   	}
		   	if(num>=10 && num<=26){
	   			ans+=decodeWays(i , index+2);
	   		}
		   
		   return ans;
		   
	   }
		
}
